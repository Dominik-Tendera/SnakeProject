
SnakeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010a  0080010a  000006ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f90  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000706  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026b  00000000  00000000  000030b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e1       	ldi	r30, 0x1C	; 28
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 32       	cpi	r26, 0x2F	; 47
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  ea:	0c 94 0c 03 	jmp	0x618	; 0x618 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_3>:
uint8_t food_row = 5;
uint8_t food_col = 3;

//Interrupt												//B0 - K1(ta z prawej) B1 - K2  B2 - K3 || B3 - W1 (górny wiersz)  B4 - W2  B5 - W3
ISR(PCINT0_vect) 
{	
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	PCMSK0 = 0;											//Disable pcint interrupts on portc
 104:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>

	uint8_t local_state = 0;
	
	DDRB = 0b00011000;									//Set rows as outputs and columns as inputs
 108:	28 e1       	ldi	r18, 0x18	; 24
 10a:	24 b9       	out	0x04, r18	; 4
	PORTB = 0b00000111;
 10c:	37 e0       	ldi	r19, 0x07	; 7
 10e:	35 b9       	out	0x05, r19	; 5
	local_state = PINB & 0b00000111;					//reads which column
 110:	83 b1       	in	r24, 0x03	; 3
 112:	98 2f       	mov	r25, r24
 114:	97 70       	andi	r25, 0x07	; 7
			
	DDRB = 0b00000111;									//Set rows as inputs and columns as outputs
 116:	34 b9       	out	0x04, r19	; 4
	PORTB = 0b00011000;									//Set rows to high (pull ups) and columns to low
 118:	25 b9       	out	0x05, r18	; 5
	local_state |= PINB & 0b00011000;					//reads which row and combines with columd record
 11a:	83 b1       	in	r24, 0x03	; 3
 11c:	88 71       	andi	r24, 0x18	; 24
 11e:	89 2b       	or	r24, r25
														
														// left = 20 |  right = 17 | down = 18 | up = 10 | reset = 9 | animation = 12
														//Warunek uniemo¿liwiaj¹cy przekazanie b³êdnego wyniku po puszczeniu przycisku
	if(local_state == 20 || local_state == 17 || local_state == 18 || local_state == 10 || local_state == 9 || local_state == 12){
 120:	84 31       	cpi	r24, 0x14	; 20
 122:	51 f0       	breq	.+20     	; 0x138 <__vector_3+0x46>
 124:	81 31       	cpi	r24, 0x11	; 17
 126:	41 f0       	breq	.+16     	; 0x138 <__vector_3+0x46>
 128:	82 31       	cpi	r24, 0x12	; 18
 12a:	31 f0       	breq	.+12     	; 0x138 <__vector_3+0x46>
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	21 f0       	breq	.+8      	; 0x138 <__vector_3+0x46>
 130:	89 30       	cpi	r24, 0x09	; 9
 132:	11 f0       	breq	.+4      	; 0x138 <__vector_3+0x46>
 134:	8c 30       	cpi	r24, 0x0C	; 12
 136:	11 f4       	brne	.+4      	; 0x13c <__vector_3+0x4a>
		cont_state = local_state;
 138:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cont_state>
	}
	
	PCMSK0 = (1<<PCINT3)|(1<<PCINT4)|(1<<PCINT5);		//Restore rows as pcint interrupt triggers
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <reset>:

void reset(){
	matrix_set_all(OFF);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <matrix_set_all>
	matrix_set(3,2,ON);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 c2 01 	call	0x384	; 0x384 <matrix_set>
	g_row = 3;
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_row>
	g_col = 2;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_col>
	cont_state = 9;
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <cont_state>
	length = 2;
 176:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <length>
 17a:	08 95       	ret

0000017c <movement_conditioning>:
}
			
void movement_conditioning(matrix_state_t value){
	if(matrix[g_row][g_col]==OFF){
 17c:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <g_row>
 180:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <g_col>
 184:	25 2f       	mov	r18, r21
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e2 0f       	add	r30, r18
 194:	f3 1f       	adc	r31, r19
 196:	e4 5f       	subi	r30, 0xF4	; 244
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	e6 0f       	add	r30, r22
 19c:	f1 1d       	adc	r31, r1
 19e:	90 81       	ld	r25, Z
 1a0:	91 11       	cpse	r25, r1
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <movement_conditioning+0x32>
		matrix_set(g_row,g_col,value);
 1a4:	48 2f       	mov	r20, r24
 1a6:	85 2f       	mov	r24, r21
 1a8:	0e 94 c2 01 	call	0x384	; 0x384 <matrix_set>
 1ac:	08 95       	ret
	}
	else if(matrix[g_row][g_col]==FOOD){			//warunek zwiêkszaj¹cy d³ugoœæ i losuj¹cy nowe po³o¿enie jedzenia na macierzy
 1ae:	99 30       	cpi	r25, 0x09	; 9
 1b0:	59 f5       	brne	.+86     	; 0x208 <movement_conditioning+0x8c>
		matrix_set(g_row,g_col,value);
 1b2:	48 2f       	mov	r20, r24
 1b4:	85 2f       	mov	r24, r21
 1b6:	0e 94 c2 01 	call	0x384	; 0x384 <matrix_set>
		length++;
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <length>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <length>
		do{
			food_row = rand() % 7;
 1c4:	0e 94 99 02 	call	0x532	; 0x532 <rand>
 1c8:	67 e0       	ldi	r22, 0x07	; 7
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 25 02 	call	0x44a	; 0x44a <__divmodhi4>
 1d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <food_row>
			food_col = rand() % 5;
 1d4:	0e 94 99 02 	call	0x532	; 0x532 <rand>
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 25 02 	call	0x44a	; 0x44a <__divmodhi4>
 1e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <food_col>
		}
		while(matrix[food_row][food_col] != OFF);
 1e4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <food_row>
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e2 0f       	add	r30, r18
 1f6:	f3 1f       	adc	r31, r19
 1f8:	e4 5f       	subi	r30, 0xF4	; 244
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	e8 0f       	add	r30, r24
 1fe:	f1 1d       	adc	r31, r1
 200:	80 81       	ld	r24, Z
 202:	81 11       	cpse	r24, r1
 204:	df cf       	rjmp	.-66     	; 0x1c4 <movement_conditioning+0x48>
 206:	08 95       	ret
	}
	else{
		reset();									//warunek koñcz¹cy grê
 208:	0e 94 aa 00 	call	0x154	; 0x154 <reset>
 20c:	08 95       	ret

0000020e <snake_movement>:
	}
}			
			
void snake_movement(){
	if(cont_state == 9){			//reset
 20e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <cont_state>
 212:	89 30       	cpi	r24, 0x09	; 9
 214:	19 f4       	brne	.+6      	; 0x21c <snake_movement+0xe>
		reset();
 216:	0e 94 aa 00 	call	0x154	; 0x154 <reset>
 21a:	41 c0       	rjmp	.+130    	; 0x29e <snake_movement+0x90>
	}
	else if(cont_state==17){		//right
 21c:	81 31       	cpi	r24, 0x11	; 17
 21e:	69 f4       	brne	.+26     	; 0x23a <snake_movement+0x2c>
		g_col++;
 220:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_col>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_col>
		if(g_col>4){								
 22a:	85 30       	cpi	r24, 0x05	; 5
 22c:	10 f0       	brcs	.+4      	; 0x232 <snake_movement+0x24>
			g_col = 0;
 22e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_col>
		}
		movement_conditioning(RIGHT);
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 be 00 	call	0x17c	; 0x17c <movement_conditioning>
 238:	32 c0       	rjmp	.+100    	; 0x29e <snake_movement+0x90>
	}
	else if(cont_state==18){		//down
 23a:	82 31       	cpi	r24, 0x12	; 18
 23c:	69 f4       	brne	.+26     	; 0x258 <snake_movement+0x4a>
		g_row++;
 23e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_row>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_row>
		if(g_row>6){
 248:	87 30       	cpi	r24, 0x07	; 7
 24a:	10 f0       	brcs	.+4      	; 0x250 <snake_movement+0x42>
			g_row = 0;
 24c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_row>
		}
		movement_conditioning(DOWN);
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	0e 94 be 00 	call	0x17c	; 0x17c <movement_conditioning>
 256:	23 c0       	rjmp	.+70     	; 0x29e <snake_movement+0x90>
	}
	else if(cont_state==10){		//up
 258:	8a 30       	cpi	r24, 0x0A	; 10
 25a:	81 f4       	brne	.+32     	; 0x27c <snake_movement+0x6e>
		if(g_row==0){
 25c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_row>
 260:	81 11       	cpse	r24, r1
 262:	03 c0       	rjmp	.+6      	; 0x26a <snake_movement+0x5c>
			g_row = 7;
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_row>
		}
		g_row--;
 26a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_row>
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_row>
		movement_conditioning(UP);
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	0e 94 be 00 	call	0x17c	; 0x17c <movement_conditioning>
 27a:	11 c0       	rjmp	.+34     	; 0x29e <snake_movement+0x90>
	}
	else if(cont_state==20){		//left
 27c:	84 31       	cpi	r24, 0x14	; 20
 27e:	79 f4       	brne	.+30     	; 0x29e <snake_movement+0x90>
		if(g_col==0){
 280:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_col>
 284:	81 11       	cpse	r24, r1
 286:	03 c0       	rjmp	.+6      	; 0x28e <snake_movement+0x80>
			g_col = 5;
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_col>
		}
		g_col--;
 28e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_col>
 292:	81 50       	subi	r24, 0x01	; 1
 294:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_col>
		movement_conditioning(LEFT);
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	0e 94 be 00 	call	0x17c	; 0x17c <movement_conditioning>
	}	
	
	matrix_set(food_row, food_col, FOOD);					
 29e:	49 e0       	ldi	r20, 0x09	; 9
 2a0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <food_col>
 2a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <food_row>
 2a8:	0e 94 c2 01 	call	0x384	; 0x384 <matrix_set>
 2ac:	08 95       	ret

000002ae <snake_tail>:
}

				
void snake_tail(){
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
	uint8_t loc_row = g_row;
 2b4:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <g_row>
	uint8_t loc_col = g_col;
 2b8:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <g_col>
	
	for(uint8_t i = length; i <= length; i--){		//Pêtla wy³¹czaj¹ca diodê za ogonem wê¿a w zale¿noœci od parametru length
 2bc:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <length>
 2c0:	33 c0       	rjmp	.+102    	; 0x328 <snake_tail+0x7a>
		if(matrix[loc_row][loc_col] == RIGHT){
 2c2:	81 2f       	mov	r24, r17
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	e8 0f       	add	r30, r24
 2d2:	f9 1f       	adc	r31, r25
 2d4:	e4 5f       	subi	r30, 0xF4	; 244
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	ed 0f       	add	r30, r29
 2da:	f1 1d       	adc	r31, r1
 2dc:	80 81       	ld	r24, Z
 2de:	86 30       	cpi	r24, 0x06	; 6
 2e0:	29 f4       	brne	.+10     	; 0x2ec <snake_tail+0x3e>
			if(loc_col==0){
 2e2:	d1 11       	cpse	r29, r1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <snake_tail+0x3a>
				loc_col = 5;
 2e6:	d5 e0       	ldi	r29, 0x05	; 5
			}
			loc_col--;
 2e8:	d1 50       	subi	r29, 0x01	; 1
 2ea:	16 c0       	rjmp	.+44     	; 0x318 <snake_tail+0x6a>
		}
		else if(matrix[loc_row][loc_col] == DOWN){
 2ec:	87 30       	cpi	r24, 0x07	; 7
 2ee:	29 f4       	brne	.+10     	; 0x2fa <snake_tail+0x4c>
			if(loc_row==0){
 2f0:	11 11       	cpse	r17, r1
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <snake_tail+0x48>
				loc_row = 7;
 2f4:	17 e0       	ldi	r17, 0x07	; 7
			}
			loc_row--;
 2f6:	11 50       	subi	r17, 0x01	; 1
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <snake_tail+0x6a>
		}
		else if(matrix[loc_row][loc_col] == UP){
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	21 f4       	brne	.+8      	; 0x306 <snake_tail+0x58>
			loc_row++;
 2fe:	1f 5f       	subi	r17, 0xFF	; 255
			if(loc_row>6){
 300:	17 30       	cpi	r17, 0x07	; 7
 302:	38 f4       	brcc	.+14     	; 0x312 <snake_tail+0x64>
 304:	09 c0       	rjmp	.+18     	; 0x318 <snake_tail+0x6a>
				loc_row = 0;
			}
		}
		else if(matrix[loc_row][loc_col] == LEFT){
 306:	88 30       	cpi	r24, 0x08	; 8
 308:	39 f4       	brne	.+14     	; 0x318 <snake_tail+0x6a>
			loc_col++;
 30a:	df 5f       	subi	r29, 0xFF	; 255
			if(loc_col>4){
 30c:	d5 30       	cpi	r29, 0x05	; 5
 30e:	18 f4       	brcc	.+6      	; 0x316 <snake_tail+0x68>
 310:	03 c0       	rjmp	.+6      	; 0x318 <snake_tail+0x6a>
			loc_row--;
		}
		else if(matrix[loc_row][loc_col] == UP){
			loc_row++;
			if(loc_row>6){
				loc_row = 0;
 312:	10 e0       	ldi	r17, 0x00	; 0
 314:	01 c0       	rjmp	.+2      	; 0x318 <snake_tail+0x6a>
			}
		}
		else if(matrix[loc_row][loc_col] == LEFT){
			loc_col++;
			if(loc_col>4){
				loc_col = 0;
 316:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		if(i==0){
 318:	c1 11       	cpse	r28, r1
 31a:	05 c0       	rjmp	.+10     	; 0x326 <snake_tail+0x78>
			matrix_set(loc_row,loc_col,OFF);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	6d 2f       	mov	r22, r29
 320:	81 2f       	mov	r24, r17
 322:	0e 94 c2 01 	call	0x384	; 0x384 <matrix_set>
				
void snake_tail(){
	uint8_t loc_row = g_row;
	uint8_t loc_col = g_col;
	
	for(uint8_t i = length; i <= length; i--){		//Pêtla wy³¹czaj¹ca diodê za ogonem wê¿a w zale¿noœci od parametru length
 326:	c1 50       	subi	r28, 0x01	; 1
 328:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <length>
 32c:	8c 17       	cp	r24, r28
 32e:	48 f6       	brcc	.-110    	; 0x2c2 <snake_tail+0x14>
			matrix_set(loc_row,loc_col,OFF);
		}
		
		
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	08 95       	ret

00000338 <main>:
			
			
void main() {
	matrix_init();
 338:	0e 94 bc 01 	call	0x378	; 0x378 <matrix_init>
	PCICR = (1<<PCIE0);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1<<PCINT3)|(1<<PCINT4)|(1<<PCINT5);	//Ustawienie przerwania wywo³ywanego zmian¹ na 3 pinach B
 342:	88 e3       	ldi	r24, 0x38	; 56
 344:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	sei();
 348:	78 94       	sei
	
	// Main loop
	uint16_t prescaler_game_update = 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
	while (1) {
		if(prescaler_game_update++ > 1400) {
 34e:	ec 01       	movw	r28, r24
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	89 37       	cpi	r24, 0x79	; 121
 354:	95 40       	sbci	r25, 0x05	; 5
 356:	40 f0       	brcs	.+16     	; 0x368 <main+0x30>
			prescaler_game_update = 0;
			matrix_init();							//na czas dokonywania zmian w macierzy zgaszenie wyœwietlacza
 358:	0e 94 bc 01 	call	0x378	; 0x378 <matrix_init>
			snake_movement();
 35c:	0e 94 07 01 	call	0x20e	; 0x20e <snake_movement>
			snake_tail();
 360:	0e 94 57 01 	call	0x2ae	; 0x2ae <snake_tail>
	
	// Main loop
	uint16_t prescaler_game_update = 0;
	while (1) {
		if(prescaler_game_update++ > 1400) {
			prescaler_game_update = 0;
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
			matrix_init();							//na czas dokonywania zmian w macierzy zgaszenie wyœwietlacza
			snake_movement();
			snake_tail();
		}
		// Updates one LED at a time
		matrix_update();
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <matrix_update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	81 e2       	ldi	r24, 0x21	; 33
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x36>
 372:	00 00       	nop
 374:	ce 01       	movw	r24, r28
 376:	eb cf       	rjmp	.-42     	; 0x34e <main+0x16>

00000378 <matrix_init>:

void matrix_set_col(uint8_t col, matrix_state_t val) {
    for (uint8_t row = 0; row < MATRIX_ROW_COUNT; row++) {
        matrix[row][col] = val;
    }
}
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	87 b9       	out	0x07, r24	; 7
 37c:	18 b8       	out	0x08, r1	; 8
 37e:	8a b9       	out	0x0a, r24	; 10
 380:	1b b8       	out	0x0b, r1	; 11
 382:	08 95       	ret

00000384 <matrix_set>:
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	e8 0f       	add	r30, r24
 392:	f9 1f       	adc	r31, r25
 394:	e4 5f       	subi	r30, 0xF4	; 244
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	e6 0f       	add	r30, r22
 39a:	f1 1d       	adc	r31, r1
 39c:	40 83       	st	Z, r20
 39e:	08 95       	ret

000003a0 <matrix_set_all>:

void matrix_set_all(matrix_state_t val) {
    for (uint8_t row = 0; row < MATRIX_ROW_COUNT; row++) {
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	14 c0       	rjmp	.+40     	; 0x3cc <matrix_set_all+0x2c>
        for (uint8_t col = 0; col < MATRIX_COL_COUNT; col++) {
            matrix[row][col] = val;
 3a4:	24 2f       	mov	r18, r20
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	f9 01       	movw	r30, r18
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e2 0f       	add	r30, r18
 3b4:	f3 1f       	adc	r31, r19
 3b6:	e4 5f       	subi	r30, 0xF4	; 244
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	e9 0f       	add	r30, r25
 3bc:	f1 1d       	adc	r31, r1
 3be:	80 83       	st	Z, r24
    }
}

void matrix_set_all(matrix_state_t val) {
    for (uint8_t row = 0; row < MATRIX_ROW_COUNT; row++) {
        for (uint8_t col = 0; col < MATRIX_COL_COUNT; col++) {
 3c0:	9f 5f       	subi	r25, 0xFF	; 255
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <matrix_set_all+0x26>
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	95 30       	cpi	r25, 0x05	; 5
 3c8:	68 f3       	brcs	.-38     	; 0x3a4 <matrix_set_all+0x4>
        matrix[row][col] = val;
    }
}

void matrix_set_all(matrix_state_t val) {
    for (uint8_t row = 0; row < MATRIX_ROW_COUNT; row++) {
 3ca:	4f 5f       	subi	r20, 0xFF	; 255
 3cc:	47 30       	cpi	r20, 0x07	; 7
 3ce:	d0 f3       	brcs	.-12     	; 0x3c4 <matrix_set_all+0x24>
        for (uint8_t col = 0; col < MATRIX_COL_COUNT; col++) {
            matrix[row][col] = val;
        }
    }
}
 3d0:	08 95       	ret

000003d2 <matrix_update>:

void matrix_update(void) {
    static uint8_t loc_row = 0;			//static oznacza ¿e tworzymy zmienn¹ ktora zachowuje siê jak globalna i ostatnia wartoœæ zmiennej jest zapamiêtania pomimo skoñczenia siê funkcji w której jest zawarta 
    static uint8_t loc_col = 0;
	
    matrix_state_t val = matrix[loc_row][loc_col];
 3d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <loc_row.1666>
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 3dc:	fc 01       	movw	r30, r24
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	e8 0f       	add	r30, r24
 3e8:	f9 1f       	adc	r31, r25
 3ea:	e4 5f       	subi	r30, 0xF4	; 244
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	e2 0f       	add	r30, r18
 3f0:	f1 1d       	adc	r31, r1
 3f2:	80 81       	ld	r24, Z

    // Write led
    if (val) {
 3f4:	88 23       	and	r24, r24
 3f6:	a1 f0       	breq	.+40     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		PORTC = ~(1 << loc_col);  
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	ac 01       	movw	r20, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	2a 95       	dec	r18
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	9a 01       	movw	r18, r20
 40a:	20 95       	com	r18
 40c:	28 b9       	out	0x08, r18	; 8
        PORTD =  (1 << loc_row);
 40e:	00 90 0b 01 	lds	r0, 0x010B	; 0x80010b <loc_row.1666>
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	8b b9       	out	0x0b, r24	; 11
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
    } else {
        PORTD = 0;
 420:	1b b8       	out	0x0b, r1	; 11
        PORTC = 0;
 422:	18 b8       	out	0x08, r1	; 8
    }

    // Move to the next led in a loc_row
    // Loop to the next loc_col if we reach the end
    if (++loc_col >= MATRIX_COL_COUNT) {
 424:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 42e:	85 30       	cpi	r24, 0x05	; 5
 430:	58 f0       	brcs	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
        loc_col = 0;
 432:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
        if (++loc_row >= MATRIX_ROW_COUNT) {
 436:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <loc_row.1666>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <loc_row.1666>
 440:	87 30       	cpi	r24, 0x07	; 7
 442:	10 f0       	brcs	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
            loc_row = 0;
 444:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <loc_row.1666>
 448:	08 95       	ret

0000044a <__divmodhi4>:
 44a:	97 fb       	bst	r25, 7
 44c:	07 2e       	mov	r0, r23
 44e:	16 f4       	brtc	.+4      	; 0x454 <__divmodhi4+0xa>
 450:	00 94       	com	r0
 452:	07 d0       	rcall	.+14     	; 0x462 <__divmodhi4_neg1>
 454:	77 fd       	sbrc	r23, 7
 456:	09 d0       	rcall	.+18     	; 0x46a <__divmodhi4_neg2>
 458:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 45c:	07 fc       	sbrc	r0, 7
 45e:	05 d0       	rcall	.+10     	; 0x46a <__divmodhi4_neg2>
 460:	3e f4       	brtc	.+14     	; 0x470 <__divmodhi4_exit>

00000462 <__divmodhi4_neg1>:
 462:	90 95       	com	r25
 464:	81 95       	neg	r24
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__divmodhi4_neg2>:
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255

00000470 <__divmodhi4_exit>:
 470:	08 95       	ret

00000472 <__udivmodhi4>:
 472:	aa 1b       	sub	r26, r26
 474:	bb 1b       	sub	r27, r27
 476:	51 e1       	ldi	r21, 0x11	; 17
 478:	07 c0       	rjmp	.+14     	; 0x488 <__udivmodhi4_ep>

0000047a <__udivmodhi4_loop>:
 47a:	aa 1f       	adc	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	a6 17       	cp	r26, r22
 480:	b7 07       	cpc	r27, r23
 482:	10 f0       	brcs	.+4      	; 0x488 <__udivmodhi4_ep>
 484:	a6 1b       	sub	r26, r22
 486:	b7 0b       	sbc	r27, r23

00000488 <__udivmodhi4_ep>:
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	5a 95       	dec	r21
 48e:	a9 f7       	brne	.-22     	; 0x47a <__udivmodhi4_loop>
 490:	80 95       	com	r24
 492:	90 95       	com	r25
 494:	bc 01       	movw	r22, r24
 496:	cd 01       	movw	r24, r26
 498:	08 95       	ret

0000049a <do_rand>:
 49a:	8f 92       	push	r8
 49c:	9f 92       	push	r9
 49e:	af 92       	push	r10
 4a0:	bf 92       	push	r11
 4a2:	cf 92       	push	r12
 4a4:	df 92       	push	r13
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
 4b0:	68 81       	ld	r22, Y
 4b2:	79 81       	ldd	r23, Y+1	; 0x01
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	9b 81       	ldd	r25, Y+3	; 0x03
 4b8:	61 15       	cp	r22, r1
 4ba:	71 05       	cpc	r23, r1
 4bc:	81 05       	cpc	r24, r1
 4be:	91 05       	cpc	r25, r1
 4c0:	21 f4       	brne	.+8      	; 0x4ca <do_rand+0x30>
 4c2:	64 e2       	ldi	r22, 0x24	; 36
 4c4:	79 ed       	ldi	r23, 0xD9	; 217
 4c6:	8b e5       	ldi	r24, 0x5B	; 91
 4c8:	97 e0       	ldi	r25, 0x07	; 7
 4ca:	2d e1       	ldi	r18, 0x1D	; 29
 4cc:	33 ef       	ldi	r19, 0xF3	; 243
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	0e 94 a9 02 	call	0x552	; 0x552 <__divmodsi4>
 4d6:	49 01       	movw	r8, r18
 4d8:	5a 01       	movw	r10, r20
 4da:	9b 01       	movw	r18, r22
 4dc:	ac 01       	movw	r20, r24
 4de:	a7 ea       	ldi	r26, 0xA7	; 167
 4e0:	b1 e4       	ldi	r27, 0x41	; 65
 4e2:	0e 94 c8 02 	call	0x590	; 0x590 <__muluhisi3>
 4e6:	6b 01       	movw	r12, r22
 4e8:	7c 01       	movw	r14, r24
 4ea:	ac ee       	ldi	r26, 0xEC	; 236
 4ec:	b4 ef       	ldi	r27, 0xF4	; 244
 4ee:	a5 01       	movw	r20, r10
 4f0:	94 01       	movw	r18, r8
 4f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__mulohisi3>
 4f6:	dc 01       	movw	r26, r24
 4f8:	cb 01       	movw	r24, r22
 4fa:	8c 0d       	add	r24, r12
 4fc:	9d 1d       	adc	r25, r13
 4fe:	ae 1d       	adc	r26, r14
 500:	bf 1d       	adc	r27, r15
 502:	b7 ff       	sbrs	r27, 7
 504:	03 c0       	rjmp	.+6      	; 0x50c <do_rand+0x72>
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	a1 09       	sbc	r26, r1
 50a:	b0 48       	sbci	r27, 0x80	; 128
 50c:	88 83       	st	Y, r24
 50e:	99 83       	std	Y+1, r25	; 0x01
 510:	aa 83       	std	Y+2, r26	; 0x02
 512:	bb 83       	std	Y+3, r27	; 0x03
 514:	9f 77       	andi	r25, 0x7F	; 127
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	bf 90       	pop	r11
 524:	af 90       	pop	r10
 526:	9f 90       	pop	r9
 528:	8f 90       	pop	r8
 52a:	08 95       	ret

0000052c <rand_r>:
 52c:	0e 94 4d 02 	call	0x49a	; 0x49a <do_rand>
 530:	08 95       	ret

00000532 <rand>:
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 4d 02 	call	0x49a	; 0x49a <do_rand>
 53a:	08 95       	ret

0000053c <srand>:
 53c:	a0 e0       	ldi	r26, 0x00	; 0
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 544:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 548:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 54c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 550:	08 95       	ret

00000552 <__divmodsi4>:
 552:	05 2e       	mov	r0, r21
 554:	97 fb       	bst	r25, 7
 556:	1e f4       	brtc	.+6      	; 0x55e <__divmodsi4+0xc>
 558:	00 94       	com	r0
 55a:	0e 94 c0 02 	call	0x580	; 0x580 <__negsi2>
 55e:	57 fd       	sbrc	r21, 7
 560:	07 d0       	rcall	.+14     	; 0x570 <__divmodsi4_neg2>
 562:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodsi4>
 566:	07 fc       	sbrc	r0, 7
 568:	03 d0       	rcall	.+6      	; 0x570 <__divmodsi4_neg2>
 56a:	4e f4       	brtc	.+18     	; 0x57e <__divmodsi4_exit>
 56c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__negsi2>

00000570 <__divmodsi4_neg2>:
 570:	50 95       	com	r21
 572:	40 95       	com	r20
 574:	30 95       	com	r19
 576:	21 95       	neg	r18
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	4f 4f       	sbci	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255

0000057e <__divmodsi4_exit>:
 57e:	08 95       	ret

00000580 <__negsi2>:
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__muluhisi3>:
 590:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__umulhisi3>
 594:	a5 9f       	mul	r26, r21
 596:	90 0d       	add	r25, r0
 598:	b4 9f       	mul	r27, r20
 59a:	90 0d       	add	r25, r0
 59c:	a4 9f       	mul	r26, r20
 59e:	80 0d       	add	r24, r0
 5a0:	91 1d       	adc	r25, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	08 95       	ret

000005a6 <__mulshisi3>:
 5a6:	b7 ff       	sbrs	r27, 7
 5a8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__muluhisi3>

000005ac <__mulohisi3>:
 5ac:	0e 94 c8 02 	call	0x590	; 0x590 <__muluhisi3>
 5b0:	82 1b       	sub	r24, r18
 5b2:	93 0b       	sbc	r25, r19
 5b4:	08 95       	ret

000005b6 <__udivmodsi4>:
 5b6:	a1 e2       	ldi	r26, 0x21	; 33
 5b8:	1a 2e       	mov	r1, r26
 5ba:	aa 1b       	sub	r26, r26
 5bc:	bb 1b       	sub	r27, r27
 5be:	fd 01       	movw	r30, r26
 5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__udivmodsi4_ep>

000005c2 <__udivmodsi4_loop>:
 5c2:	aa 1f       	adc	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	ee 1f       	adc	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	a2 17       	cp	r26, r18
 5cc:	b3 07       	cpc	r27, r19
 5ce:	e4 07       	cpc	r30, r20
 5d0:	f5 07       	cpc	r31, r21
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__udivmodsi4_ep>
 5d4:	a2 1b       	sub	r26, r18
 5d6:	b3 0b       	sbc	r27, r19
 5d8:	e4 0b       	sbc	r30, r20
 5da:	f5 0b       	sbc	r31, r21

000005dc <__udivmodsi4_ep>:
 5dc:	66 1f       	adc	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a 94       	dec	r1
 5e6:	69 f7       	brne	.-38     	; 0x5c2 <__udivmodsi4_loop>
 5e8:	60 95       	com	r22
 5ea:	70 95       	com	r23
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	9b 01       	movw	r18, r22
 5f2:	ac 01       	movw	r20, r24
 5f4:	bd 01       	movw	r22, r26
 5f6:	cf 01       	movw	r24, r30
 5f8:	08 95       	ret

000005fa <__umulhisi3>:
 5fa:	a2 9f       	mul	r26, r18
 5fc:	b0 01       	movw	r22, r0
 5fe:	b3 9f       	mul	r27, r19
 600:	c0 01       	movw	r24, r0
 602:	a3 9f       	mul	r26, r19
 604:	70 0d       	add	r23, r0
 606:	81 1d       	adc	r24, r1
 608:	11 24       	eor	r1, r1
 60a:	91 1d       	adc	r25, r1
 60c:	b2 9f       	mul	r27, r18
 60e:	70 0d       	add	r23, r0
 610:	81 1d       	adc	r24, r1
 612:	11 24       	eor	r1, r1
 614:	91 1d       	adc	r25, r1
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
